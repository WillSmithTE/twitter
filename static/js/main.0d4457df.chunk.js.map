{"version":3,"sources":["api.js","AgeToVaccinationRateGraph.js","App.js","reportWebVitals.js","index.js"],"names":["api","getAll","a","fetch","response","json","jsonResponse","AgeToVaccinationRateGraph","useState","undefined","rawData","setRawData","manipulatedData","setManipulatedData","useEffect","then","manipulated","Data","filter","Area","Name4","includes","map","CovidVaccine","CensusStats","Age","Median","Num1Dose","width","height","chartType","loader","data","options","title","hAxis","vAxis","trendlines","0","type","showR2","visibleInLegend","rootProps","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGaA,EAAM,CACfC,OAAO,WAAD,4BAAE,8BAAAC,EAAA,sEACmBC,MAAM,GAAD,OAJN,cAIM,eADxB,cACEC,EADF,gBAEuBA,EAASC,OAFhC,cAEEC,EAFF,yBAGGA,GAHH,2CAAF,kDAAC,I,OCAEC,EAA4B,WAAO,IAAD,EAEbC,wBAASC,GAFI,mBAEpCC,EAFoC,KAE3BC,EAF2B,OAGGH,wBAASC,GAHZ,mBAGpCG,EAHoC,KAGnBC,EAHmB,KAgB3C,OAXAC,qBAAU,WACNd,EAAIC,SAASc,KAAKJ,KACnB,IAEHG,qBAAU,WACN,GAAIJ,EAAS,CACT,IAAMM,EAAyBN,EA2BrBO,KAEbC,QAAO,qBAAGC,KAAgBC,MAAMC,SAAS,aACzCC,KAAI,YAA6B,IAA1BH,EAAyB,EAAzBA,KAAMI,EAAmB,EAAnBA,aACV,MAAO,CAACJ,EAAKK,YAAYC,IAAIC,OAAQH,EAAaI,aA9BlDd,EAAmBG,MAExB,CAACN,IAEGE,EAAkB,cAAC,IAAD,CACrBgB,MAAO,QACPC,OAAQ,QACRC,UAAU,eACVC,OAAQ,gDACRC,KAAI,CACA,CAAC,MAAO,eADR,mBAEGpB,IAEPqB,QAAS,CACLC,MAAO,iCACPC,MAAO,CAAED,MAAO,cAChBE,MAAO,CAAEF,MAAO,qBAEhBG,WAAY,CACRC,EAAG,CAAEC,KAAM,SAAUC,QAAQ,EAAMC,iBAAiB,KAG5DC,UAAW,CAAE,cAAe,OAC3B,6CC1BMC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0d4457df.chunk.js","sourcesContent":["const BASE_URL = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5000' : 'someprodurl'\n\nexport const api = {\n    getAll: async () => {\n        const response = await fetch(`${BASE_URL}/api/areas`);\n        const jsonResponse = await response.json();\n        return jsonResponse;\n    }\n}","import { useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { api } from \"./api\";\n\nexport const AgeToVaccinationRateGraph = () => {\n\n    const [rawData, setRawData] = useState(undefined)\n    const [manipulatedData, setManipulatedData] = useState(undefined)\n\n    useEffect(() => {\n        api.getAll().then(setRawData);\n    }, []);\n\n    useEffect(() => {\n        if (rawData) {\n            const manipulated = manipulate(rawData);\n            setManipulatedData(manipulated)\n        }\n    }, [rawData]);\n\n    return manipulatedData ? <Chart\n        width={'500px'}\n        height={'300px'}\n        chartType=\"ScatterChart\"\n        loader={<div>Loading Chart</div>}\n        data={[\n            ['Age', 'Vaccinated'],\n            ...manipulatedData,\n        ]}\n        options={{\n            title: 'Sydney Age vs Vaccination Rate',\n            hAxis: { title: 'Median age' },\n            vAxis: { title: '% at least 1 dose' },\n            // legend: 'none',\n            trendlines: {\n                0: { type: 'linear', showR2: true, visibleInLegend: true }\n            },\n        }}\n        rootProps={{ 'data-testid': '1' }}\n    /> : <h1>loading...</h1>\n};\n\nfunction manipulate({ Data }) {\n    return Data\n        .filter(({ Area }) => Area.Name4.includes('Sydney'))\n        .map(({ Area, CovidVaccine }) => {\n            return [Area.CensusStats.Age.Median, CovidVaccine.Num1Dose]\n        });\n}","import './App.css';\nimport { AgeToVaccinationRateGraph } from './AgeToVaccinationRateGraph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AgeToVaccinationRateGraph />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}